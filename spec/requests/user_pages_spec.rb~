require 'spec_helper'

describe "User pages" do

  subject { page }
  
  describe "Signup page" do
    before(:each){ visit signup_path }
    let(:submit) { "Create my account" }
    it { should have_selector( 'h1', text: 'Sign up' ) }
    it { should have_selector( 'title', text: full_title('Sign up')) }

    describe "with invalid information" do
      it "should not create user" do
	expect { click_button submit }.not_to change(User, :count)
      end
      describe "after submission" do
	before { click_button submit }
	it { should have_content('error') }
	it { should have_selector('title', text: 'Sign up') }
	it { should have_content('Password is too short') }
	it { should have_content('Email is invalid') }
      end
    end
 
    describe "with valid information" do
      before do
	fill_in "Name",		with: "Example User"
	fill_in "Email",	with: "user@example.com"
	fill_in "Password",	with: "password"
	fill_in "Confirmation",	with: "password"
      end
      it "should create a user" do
	expect { click_button submit }.to change(User, :count).by(1)
      end

      describe "after saving the user" do
	before { click_button submit }	
	it { should have_link("Sign out") }
      end
    end
  end

  describe "profile page" do
    let(:user) { FactoryGirl.create(:user) }
    before { visit user_path(user) }

    it { should have_selector('h1', text: user.name ) }
    it { should have_selector('title', text: user.name ) }
  end

  describe "edit" do
    let(:user){ FactoryGirl.create(:user) }
    before do 
      sign_in user
      visit edit_user_path(user)
    end

    describe "page" do
      it { should have_selector("h1", text: "Update your profile") }
      it { should have_selector("title", text: "Edit user") }
      it { should have_link("Change", href: 'http://gravatar.com/emails') }
    end

    describe "with invalid information" do
      before { click_button "Save changes" }

      it { should have_content('error') }
    end

    describe "with valid information" do
      let(:new_name) { "New Name" }
      let(:new_email) { "new@example.com" }
      before do
	fill_in "Name",			with: new_name
	fill_in "Email",		with: new_email
	fill_in "Password",		with: user.password
	fill_in "Confirm password",	with: user.password
	click_button "Save changes"
      end

      it { should have_selector('title', text: full_title(new_name)) }
      it { should have_selector('div.alert.alert-success') }
      specify { user.reload.name.should == new_name }
      specify { user.reload.email.should == new_email }
    end
  end

  describe "index" do    

    let(:def_user) { FactoryGirl.create(:user) }
    before(:all) { 30.times { FactoryGirl.create(:user) } }
    after(:all) { User.delete_all }

    before do
      sign_in def_user
      visit users_path
    end
    
    it { should have_selector('title', text: 'All Users') }
    it { should have_selector('h1', text: 'All Users') }

    describe "pagination" do

      it { should have_selector('div.pagination') }

      it "should list each user" do
        User.paginate(page: 1).each do |user|
 	  page.should have_selector('li', text: user.name)
        end
      end
    end
  end
end
